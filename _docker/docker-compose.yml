
services:
  redis:
    image: redis:latest  # Use the official Redis image (latest tag)
    container_name: stg-redis
    ports:
      - "6379:6379"  # Map the Redis port (6379) on the container to the host's port 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Health check to ensure Redis is running
      interval: 10s  # Check every 10 seconds
      timeout: 5s  # Fail the container if it doesn't respond within 5 seconds
      retries: 3  # Retry 3 times before considering the container unhealthy
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - stg


  arangodb:
    image: arangodb:latest
    container_name: stg-arangodb
    restart: always
    ports:
      - "50001:8529"
    environment:
      ARANGO_ROOT_PASSWORD: letmein
    volumes:
      - ${DB_DATA_DIR}:/var/lib/arangodb3
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - stg
    #command: arangod --server.authentication=false

  backend:
    container_name: stg-backend
    # Configuration for building the docker image for the service
    build:
      context: ../back # Use an image built from the specified dockerfile in the current directory.
      dockerfile: Dockerfile
    ports:
      - "50002:50002" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    environment:
      GO_ENV: prod

    depends_on:
      - arangodb
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - stg
    #healthcheck:
    #   test: ["CMD", "curl", "-f", "http://arangodb:8529"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5


  frontend:
    container_name: stg-frontend
    # Configuration for building the docker image for the service
    build:
      context: ../front # Use an image built from the specified dockerfile in the current directory.
      dockerfile: Dockerfile
    ports:
      - "50003:50003" # go chi server
    environment:
      DEV: "false"

    depends_on:
      - arangodb
      - redis
      - backend

    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - stg

networks:
  stg:
